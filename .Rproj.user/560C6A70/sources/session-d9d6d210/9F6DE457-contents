# Load necessary libraries
library(DBI)
library(duckdb)
library(fs)

# Set input/output directories
csv_directory <- "/home/kasia/Documents/appsilon_api/biodiversity-data/"
parquet_directory <- "/home/kasia/Documents/speX/data/parquet_files"

# Ensure output directory exists
if (!dir_exists(parquet_directory)) {
  dir_create(parquet_directory)
}

# Connect to DuckDB
con <- dbConnect(duckdb::duckdb(), dbdir = "conversion.duckdb")

# Get list of CSV files
csv_files <- dir_ls(csv_directory, glob = "*.csv")

# Loop through and convert each CSV
for (csv_file in csv_files) {
  file_name <- path_file(csv_file)
  parquet_file <- file.path(parquet_directory, paste0(file_name, ".parquet"))
  
  cat("Converting:", file_name, "...\n")
  
  # Proper SQL for robust CSV parsing
  sql <- sprintf("
    COPY (
      SELECT * FROM read_csv('%s',
        AUTO_DETECT = true,
        IGNORE_ERRORS = true,
        HEADER = true,
        QUOTE = '\"',
        DELIM = ',',
        SAMPLE_SIZE = 20000
      )
    ) TO '%s' (FORMAT 'parquet');
  ", csv_file, parquet_file)
  
  tryCatch({
    dbExecute(con, sql)
    cat("Success:", file_name, "\n")
  }, error = function(e) {
    cat("Failed to convert", file_name, "\n")
    cat("  Reason:", e$message, "\n")
  })
}

# Disconnect from DuckDB
dbDisconnect(con, shutdown = TRUE)
cat("All valid CSVs have been converted.\n")

sas_url <- "https://shinyappdevdata.blob.core.windows.net/biodata/ocurence.parquet?sp=r&st=2025-04-21T21:47:31Z&se=2025-05-10T05:47:31Z&sv=2024-11-04&sr=b&sig=pV6SEvxR1yoB2gD06xDDF6%2B3yk1PEWGQGzh0qIGYn1A%3D"
sas_url_mutlimedia <- "https://shinyappdevdata.blob.core.windows.net/biodata/multimedia.parquet?sp=r&st=2025-04-22T09:32:23Z&se=2025-05-14T17:32:23Z&sv=2024-11-04&sr=b&sig=OdXL1%2BA3irwDfsWw1v5jgDvIYhU%2FUM9jdRoEvOpepuE%3D"


library(DBI)
library(duckdb)

source("globals.R")

# Path to your parquet file
parquet_file <- "data/parquet_files/occurence.parquet"  # Change this to your actual path

# Connect to DuckDB (in-memory or use `dbdir = "your.db"` for persistent)
#con <- dbConnect(duckdb::duckdb(), dbdir = "my_database.duckdb")

con <- dbConnect(duckdb::duckdb(), dbdir = ":memory:")
dbExecute(con, "INSTALL httpfs; LOAD httpfs;")
dbExecute(con, "INSTALL parquet; LOAD parquet;")

# Example 1: Load a preview of data (first 10 rows)
preview <- dbGetQuery(con, sprintf("SELECT * FROM parquet_scan('%s') LIMIT 10", sas_url))
print(preview)

preview_multimedia <- dbGetQuery(duckdb_con, "SELECT CoreId, rightsHolder, creator, accessURI FROM multimedia limit 10")
preview_occurence <- dbGetQuery(duckdb_con, "SELECT * FROM occurrence limit 10")

# Example 2: Filtered query (adjust fields to your data)
filtered <- dbGetQuery(con, sprintf("
  SELECT distinct country FROM parquet_scan('%s')
", sas_url))
print(filtered)
